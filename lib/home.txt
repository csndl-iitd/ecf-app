 import 'dart:async';
import 'dart:developer';
import 'package:event_tracker/Firebase/FirebaseImageStorage.dart';
import 'package:event_tracker/HIVE/HiveService.dart';
import 'package:flutter/material.dart';
import 'package:flutter_accessibility_service/accessibility_event.dart';
import 'package:flutter_accessibility_service/constants.dart';
import 'package:flutter_accessibility_service/flutter_accessibility_service.dart';
import 'package:media_projection_screenshot/captured_image.dart';
import 'package:media_projection_screenshot/media_projection_screenshot.dart';
import 'package:flutter/services.dart';
import 'package:seeso_flutter/event/calibration_info.dart';
import 'package:seeso_flutter/event/gaze_info.dart';
import 'package:seeso_flutter/seeso.dart';

import 'package:seeso_flutter/seeso_plugin_constants.dart';



class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool isAccessibilityServiceRunning = false;
  late StreamSubscription<AccessibilityEvent> _accessibilitySubscription;
  List<Map<String, dynamic>> _events = [];
  final HiveService _hiveService = HiveService();
  final _screenshotPlugin = MediaProjectionScreenshot();
  FirebaseImageStorage storage = FirebaseImageStorage();
  static const String _licenseKey = "dev_w0gqktyyf0i5n3yeyeqswhrfwwj09dc6vjuisw1q";
  final _seesoPlugin = SeeSo();

  double _x = 0.0, _y = 0.0;
  MaterialColor _gazeColor = Colors.red;
  double _nextX = 0, _nextY = 0, _calibrationProgress = 0.0;
  //final FirebaseStorageService _storageService = FirebaseStorageService();

  CapturedImage? image;
  //final FirestoreWrite _firestoreWrite = FirestoreWrite();

  
  @override
  void initState() {
    super.initState();
    eyeGazeTracking();
    _initAccessibilityService();
    _loadEventsFromHive();
  }

  @override
  void dispose() {
    _stopAccessibilityListener();
    super.dispose();
  }


//eyeGazeTracking
  Future<void> eyeGazeTracking() async {
  await _seesoPlugin.requestCameraPermission();
  print(await _seesoPlugin.checkCameraPermission());
  _seesoPlugin.startCalibration(CalibrationMode.FIVE);

 _seesoPlugin.getCalibrationEvent().listen((event) {
      CalibrationInfo caliInfo = CalibrationInfo(event);
      if (caliInfo.type == CalibrationType.CALIBRATION_NEXT_XY) {
        setState(() {
          _nextX = caliInfo.nextX!;
          _nextY = caliInfo.nextY!;
          _calibrationProgress = 0.0;
        });
        Future.delayed(const Duration(milliseconds: 500), () {
          _seesoPlugin.startCollectSamples();
        });
      } 
    });

  await _seesoPlugin.initGazeTracker(licenseKey: _licenseKey);
  _seesoPlugin.startTracking();

  _seesoPlugin.getGazeEvent().listen((event) {
    GazeInfo info = GazeInfo(event);
    if (info.trackingState == TrackingState.SUCCESS) {
     if (info.trackingState == TrackingState.SUCCESS) {
        setState(() {
          _x = info.x;
          _y = info.y;
          _gazeColor = Colors.green;
          print('gaze : (${_x},${_y})');
        });
      } else {
        setState(() {
          _gazeColor = Colors.red;
        });
      }
    } else {
      setState(() {
          _x = 0.0;
          _y = 0.0;
        
        });
      print("gaze not found");
    }
  }
  );
}


//accessibility services
  Future<void> _initAccessibilityService() async {
    final _seesoPlugin = SeeSo();
    _seesoPlugin.startCalibration(CalibrationMode.FIVE);
    final bool status = await FlutterAccessibilityService.isAccessibilityPermissionEnabled();
    if (!status) {
      final bool res = await FlutterAccessibilityService.requestAccessibilityPermission();
      _screenshotPlugin.requestPermission();
      final stream = await _screenshotPlugin.startCapture(x: 0, y: 0, width:1000, height: 2000);
                  stream?.listen((result) {
                    setState(() {
                      image = CapturedImage.fromMap(Map<String, dynamic>.from(result));
                      //print(image.toString());
                    });
                  });
      
      if (!res) {
        log('Accessibility permission denied.');
        print('Accessibility permission denied.');
        return;
      }
      
    }
    _startAccessibilityListener();
  }


  void _startAccessibilityListener() async {
    // Check if the service is already running
    if (isAccessibilityServiceRunning) {
      return;
    }
    AccessibilityEvent? lastEvent;
    // Listen to the accessibility events
    _accessibilitySubscription = FlutterAccessibilityService.accessStream.listen((event) async {

      String eventType = event.eventType.toString();
      String windowType = event.windowType.toString();
      String actionType = event.actionType.toString();
      String eventTime = event.eventTime?.toString() ?? 'Unknown';
      String packageName = event.packageName ?? 'Unknown';
      String nodeId = event.nodeId?? 'Unknown';
      ScreenBounds screenbounds = event.screenBounds!;

      // Check if the new event is the same as the last one
      if (lastEvent != null &&
          lastEvent?.eventType == event.eventType &&
          lastEvent?.actionType == event.actionType &&
          lastEvent?.packageName == event.packageName) {
        return; 
      }
      // Update lastEvent
      lastEvent = event;
      print('Event Type: $eventType, Action Type: $actionType');
      print('Event Time: $eventTime, Package Name: $packageName');
      print('screenbounds : ${screenbounds},\n  windowtype: ${windowType}, nodeid: ${nodeId}\n\n');
 
 
      //Store Data in Hive 
      await _hiveService.saveEvent( DateTime.now().toString(),
        {
          'eventtype': eventType,
          'eventtime': eventTime,
          'packageName': packageName,
          
        });
      log('Event Type: $eventType, Event Time: $eventTime, Package Name: $packageName, Action Type: $actionType');
      print("\n");

      // Reload events from Hive
       _loadEventsFromHive();
       //detect click events
      if (eventType==EventType.typeViewClicked.toString()|| eventType==EventType.typeViewSelected.toString()) {
        CapturedImage? result = await _screenshotPlugin.takeCapture(x: 0, y: 0, width: 1000, height: 2000);
                 // print(result.toString());
                  setState(() {
                    image = result;
                  });
        storage.pickAndStoreImage(image,eventType,eventTime,packageName);
        print('Screenshot captured for event: $eventType');
        print('screenbounds for click event : ${screenbounds}');
          }
       else if (eventType==EventType.typeViewScrolled.toString()) {
       
          }
    });
    setState(() {
      isAccessibilityServiceRunning = true;
    });
    log('Accessibility event listener started.');
    print('Accessibility event listener started.');
  }



   Future<void> _stopAccessibilityListener() async {
    _accessibilitySubscription.cancel();
    setState(() {
      isAccessibilityServiceRunning = false;
    });
    await _screenshotPlugin.stopCapture();
    log('Accessibility event listener stopped.');
    print('Accessibility event listener stopped.');
  }

  Future<void> _loadEventsFromHive() async {
    List<Map<String, dynamic>> events = await _hiveService.loadEvents();
    setState(() {
      _events = events;
    });
  }

  @override
  Widget build(BuildContext context) {
     double hght = MediaQuery.of(context).size.height;
    double wid = MediaQuery.of(context).size.width;
    return Scaffold(
      appBar: AppBar(
        title: Text('User Interaction Tracker'),
      ),
      body:Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
           image != null
                  ? Container(height: hght*0.4,width: wid*0.4,
                  decoration: BoxDecoration(color: Colors.blueAccent,border: Border.all(width: 7,color: Colors.black12)),
                      padding: const EdgeInsets.all(6),
                      
                      
                      child: Image.memory(
                        image!.bytes,
                        width: double.infinity,
                        fit: BoxFit.cover,
                      ),
                    )
                  : Container(),
          SizedBox(child: Text('(${_x},${_y})'),),
          ElevatedButton(onPressed: (){
            storage.pickAndStoreImage(image,'eventype','eventTime','packageName');
          }, child: Text('store')),
         /* ElevatedButton(
            onPressed: isAccessibilityServiceRunning ? null : _startAccessibilityListener,
            child: Text('Start Accessibility Listener'),
          ),
          ElevatedButton(
            onPressed: _stopAccessibilityListener,
            child: Text('Stop Accessibility Listener'),
          ),*/
          
          
          
          //Display data fetched from Hive 
          Expanded(
            child: ListView.builder(
              itemCount: _events.length,
              itemBuilder: (context, index) {
                final event = _events[index];
                return ListTile(
                  leading: Text('${event['eventtime'].substring(0,10)}',style: TextStyle(fontWeight:FontWeight.bold,color: Colors.blue)),
                  title: Text('\nApp : ${event['packageName'].substring(1+event['packageName'].lastIndexOf('.')).toUpperCase()}',style: TextStyle(fontWeight:FontWeight.bold),),
                  subtitle: Text('Event Type: ${event['eventtype'].substring(14)}\nEvent Time: ${event['eventtime'].substring(10)}'),
                );
              },
            ),
          ),



        ],
      ) 
    );
  }
}